# -*- coding: utf-8 -*-

"""
    smsapi.controllers.sms_controller

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..models.message_responses import MessageResponses
from ..models.message_status import MessageStatus
from ..models.send_sms_response import SendSMSResponse
from ..exceptions.api_exception import APIException

class SMSController(BaseController):

    """A Controller to access Endpoints in the smsapi API."""


    def get_message_response(self,
                             authorization,
                             message_id):
        """Does a GET request to /messages/{messageId}/response.

        Get the responses of a SMS message

        Args:
            authorization (string): Authorization header in the format 'Bearer
                {access_token}' - get the token by using the OAuth API with
                the scope 'SMS'
            message_id (string): Unique identifier of a message - it is the
                value returned from a previous POST
                https://api.telstra.com/v1/sms/messages call

        Returns:
            list of MessageResponses: Response from the API. Success - A list
                of responses are returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/messages/{messageId}/response'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'messageId': message_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise APIException('Invalid or no credentials passed in the request', _context)
        elif _context.response.status_code == 403:
            raise APIException('Authorization credentials passed and accepted but account does not have permission', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist', _context)
        elif _context.response.status_code == 405:
            raise APIException('The requested resource does not support the supplied verb', _context)
        elif _context.response.status_code == 415:
            raise APIException('API does not support the requested content type', _context)
        elif _context.response.status_code == 422:
            raise APIException('The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request', _context)
        elif _context.response.status_code == 500:
            raise APIException('An internal error occurred when processing the request', _context)
        elif _context.response.status_code == 501:
            raise APIException('The HTTP method being used has not yet been implemented for the requested resource', _context)
        elif _context.response.status_code == 503:
            raise APIException('The service requested is currently unavailable', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, MessageResponses.from_dictionary)

    def get_message_status(self,
                           authorization,
                           message_id):
        """Does a GET request to /messages/{messageId}.

        Get the status of a SMS message

        Args:
            authorization (string): Authorization header in the format 'Bearer
                {access_token}' - get the token by using the OAuth API with
                the scope 'SMS'
            message_id (string): Unique identifier of a message - it is the
                value returned from a previous POST
                https://api.telstra.com/v1/sms/messages call

        Returns:
            MessageStatus: Response from the API. Success - the message status
                is returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/messages/{messageId}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'messageId': message_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise APIException('Invalid or no credentials passed in the request', _context)
        elif _context.response.status_code == 403:
            raise APIException('Authorization credentials passed and accepted but account does not have permission', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist', _context)
        elif _context.response.status_code == 405:
            raise APIException('The requested resource does not support the supplied verb', _context)
        elif _context.response.status_code == 415:
            raise APIException('API does not support the requested content type', _context)
        elif _context.response.status_code == 422:
            raise APIException('The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request', _context)
        elif _context.response.status_code == 500:
            raise APIException('An internal error occurred when processing the request', _context)
        elif _context.response.status_code == 501:
            raise APIException('The HTTP method being used has not yet been implemented for the requested resource', _context)
        elif _context.response.status_code == 503:
            raise APIException('The service requested is currently unavailable', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, MessageStatus.from_dictionary)

    def create_send_sms(self,
                        authorization,
                        payload):
        """Does a POST request to /messages.

        Send SMS

        Args:
            authorization (string): A header in the format 'Bearer
                {access_token}' - get the token by using the OAuth API with
                the scope 'SMS'
            payload (SendSMS): A JSON payload containing the recipient's
                Australian phone number and text message.  The recipient
                number should be in the format '04xxxxxxxx' where x is a
                digit

        Returns:
            SendSMSResponse: Response from the API. Success - the unique
                identifier for the message sent is returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/messages'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(payload))
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Invalid or missing request parameters', _context)
        elif _context.response.status_code == 401:
            raise APIException('Invalid or no credentials passed in the request', _context)
        elif _context.response.status_code == 403:
            raise APIException('Authorization credentials passed and accepted but account does not have permission', _context)
        elif _context.response.status_code == 404:
            raise APIException('The requested URI does not exist', _context)
        elif _context.response.status_code == 405:
            raise APIException('The requested resource does not support the supplied verb', _context)
        elif _context.response.status_code == 415:
            raise APIException('API does not support the requested content type', _context)
        elif _context.response.status_code == 422:
            raise APIException('The request is formed correctly, but due to some condition the request cannot be processed e.g. email is required and it is not provided in the request', _context)
        elif _context.response.status_code == 500:
            raise APIException('An internal error occurred when processing the request', _context)
        elif _context.response.status_code == 501:
            raise APIException('The HTTP method being used has not yet been implemented for the requested resource', _context)
        elif _context.response.status_code == 503:
            raise APIException('The service requested is currently unavailable', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SendSMSResponse.from_dictionary)
